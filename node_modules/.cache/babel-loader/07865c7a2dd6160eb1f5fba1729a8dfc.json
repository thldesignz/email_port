{"ast":null,"code":"import { deepExtend } from \"../../../../Utils\";\nexport class Shape {\n  constructor() {\n    this.options = {};\n    this.type = \"circle\";\n  }\n\n  get image() {\n    var _a;\n\n    return (_a = this.options[\"image\"]) !== null && _a !== void 0 ? _a : this.options[\"images\"];\n  }\n\n  set image(value) {\n    this.options[\"image\"] = value;\n    this.options[\"images\"] = value;\n  }\n\n  get custom() {\n    return this.options;\n  }\n\n  set custom(value) {\n    this.options = value;\n  }\n\n  get images() {\n    return this.image;\n  }\n\n  set images(value) {\n    this.image = value;\n  }\n\n  get stroke() {\n    return [];\n  }\n\n  set stroke(_value) {}\n\n  get character() {\n    var _a;\n\n    return (_a = this.options[\"character\"]) !== null && _a !== void 0 ? _a : this.options[\"char\"];\n  }\n\n  set character(value) {\n    this.options[\"character\"] = value;\n    this.options[\"char\"] = value;\n  }\n\n  get polygon() {\n    var _a;\n\n    return (_a = this.options[\"polygon\"]) !== null && _a !== void 0 ? _a : this.options[\"star\"];\n  }\n\n  set polygon(value) {\n    this.options[\"polygon\"] = value;\n    this.options[\"star\"] = value;\n  }\n\n  load(data) {\n    var _a, _b, _c;\n\n    if (data === undefined) {\n      return;\n    }\n\n    const options = (_a = data.options) !== null && _a !== void 0 ? _a : data.custom;\n\n    if (options !== undefined) {\n      for (const shape in options) {\n        const item = options[shape];\n\n        if (item !== undefined) {\n          this.options[shape] = deepExtend((_b = this.options[shape]) !== null && _b !== void 0 ? _b : {}, item);\n        }\n      }\n    }\n\n    this.loadShape(data.character, \"character\", \"char\", true);\n    this.loadShape(data.polygon, \"polygon\", \"star\", false);\n    this.loadShape((_c = data.image) !== null && _c !== void 0 ? _c : data.images, \"image\", \"images\", true);\n\n    if (data.type !== undefined) {\n      this.type = data.type;\n    }\n  }\n\n  loadShape(item, mainKey, altKey, altOverride) {\n    var _a, _b, _c, _d;\n\n    if (item === undefined) {\n      return;\n    }\n\n    if (item instanceof Array) {\n      if (!(this.options[mainKey] instanceof Array)) {\n        this.options[mainKey] = [];\n\n        if (!this.options[altKey] || altOverride) {\n          this.options[altKey] = [];\n        }\n      }\n\n      this.options[mainKey] = deepExtend((_a = this.options[mainKey]) !== null && _a !== void 0 ? _a : [], item);\n\n      if (!this.options[altKey] || altOverride) {\n        this.options[altKey] = deepExtend((_b = this.options[altKey]) !== null && _b !== void 0 ? _b : [], item);\n      }\n    } else {\n      if (this.options[mainKey] instanceof Array) {\n        this.options[mainKey] = {};\n\n        if (!this.options[altKey] || altOverride) {\n          this.options[altKey] = {};\n        }\n      }\n\n      this.options[mainKey] = deepExtend((_c = this.options[mainKey]) !== null && _c !== void 0 ? _c : {}, item);\n\n      if (!this.options[altKey] || altOverride) {\n        this.options[altKey] = deepExtend((_d = this.options[altKey]) !== null && _d !== void 0 ? _d : {}, item);\n      }\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}