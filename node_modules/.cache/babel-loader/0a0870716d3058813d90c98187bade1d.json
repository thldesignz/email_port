{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Particle_engine;\n\nimport { Vector, Vector3d } from \"./Utils\";\nimport { alterHsl, clamp, colorToRgb, deepExtend, getDistance, getHslFromAnimation, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, isInArray, itemFromArray, randomInRange, setRangeValue } from \"../Utils\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\n\nconst fixOutMode = data => {\n  if (isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes)) {\n    if (data.coord > data.maxCoord - data.radius * 2) {\n      data.setCb(-data.radius);\n    } else if (data.coord < data.radius * 2) {\n      data.setCb(data.radius);\n    }\n  }\n};\n\nexport class Particle {\n  constructor(engine, id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.id = id;\n    this.container = container;\n    this.group = group;\n\n    _Particle_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio;\n    const mainOptions = container.actualOptions;\n    const particlesOptions = new ParticlesOptions();\n    particlesOptions.load(mainOptions.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      const shapeOptions = new Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n    const zIndexValue = getRangeValue(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    const sizeOptions = this.options.size,\n          sizeRange = sizeOptions.value;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: getValue(sizeOptions) * container.retina.pixelRatio,\n      max: getRangeMax(sizeRange) * pxRatio,\n      min: getRangeMin(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: getRangeValue(sizeOptions.animation.count)\n    };\n    const sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = 0;\n\n      switch (sizeAnimation.startValue) {\n        case \"min\":\n          this.size.value = this.size.min;\n          this.size.status = 0;\n          break;\n\n        case \"random\":\n          this.size.value = randomInRange(this.size) * pxRatio;\n          this.size.status = Math.random() >= 0.5 ? 0 : 1;\n          break;\n\n        case \"max\":\n        default:\n          this.size.value = this.size.max;\n          this.size.status = 1;\n          break;\n      }\n\n      this.size.velocity = ((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.direction = getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    const gravityOptions = this.options.move.gravity;\n    this.gravity = {\n      enable: gravityOptions.enable,\n      acceleration: getRangeValue(gravityOptions.acceleration),\n      inverse: gravityOptions.inverse\n    };\n    this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n\n    if (this.options.move.spin.enable) {\n      const spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : {\n        x: 50,\n        y: 50\n      };\n      const spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      const pos = this.getPosition();\n      const distance = getDistance(pos, spinCenter);\n      this.spin = {\n        center: spinCenter,\n        direction: this.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: this.velocity.angle,\n        radius: distance,\n        acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : getRangeValue(this.options.move.spin.acceleration)\n      };\n    }\n\n    this.shadowColor = colorToRgb(this.options.shadow.color);\n\n    for (const updater of container.particles.updaters) {\n      if (updater.init) {\n        updater.init(this);\n      }\n    }\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleCreated) {\n        plugin.particleCreated(this);\n      }\n    }\n  }\n\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n\n  isInsideCanvas() {\n    const radius = this.getRadius();\n    const canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n\n  draw(delta) {\n    const container = this.container;\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n\n    container.canvas.drawParticle(this, delta);\n  }\n\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n\n  getRadius() {\n    var _a;\n\n    return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n  }\n\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI / 2;\n  }\n\n  getFillColor() {\n    var _a, _b;\n\n    const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n\n    if (color && this.roll && (this.backColor || this.roll.alter)) {\n      const backFactor = this.options.roll.mode === \"both\" ? 2 : 1,\n            backSum = this.options.roll.mode === \"horizontal\" ? Math.PI / 2 : 0,\n            rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        }\n\n        if (this.roll.alter) {\n          return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n        }\n      }\n    }\n\n    return color;\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    if (this.unbreakable) {\n      return;\n    }\n\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n\n    if (override) {\n      return;\n    }\n\n    const destroyOptions = this.options.destroy;\n\n    if (destroyOptions.mode === \"split\") {\n      this.split();\n    }\n  }\n\n  reset() {\n    if (this.opacity) {\n      this.opacity.loops = 0;\n    }\n\n    this.size.loops = 0;\n  }\n\n  split() {\n    const splitOptions = this.options.destroy.split;\n\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n\n    const rate = getRangeValue(splitOptions.rate.value);\n\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n\n  calcPosition(container, position, zIndex) {\n    let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    var _a, _b, _c, _d, _e, _f;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n\n    const canvasSize = container.canvas.size;\n    const pos = Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n    const radius = this.getRadius();\n\n    const outModes = this.options.move.outModes,\n          fixHorizontal = outMode => {\n      fixOutMode({\n        outMode,\n        checkModes: [\"bounce\", \"bounce-horizontal\"],\n        coord: pos.x,\n        maxCoord: container.canvas.size.width,\n        setCb: value => pos.x += value,\n        radius\n      });\n    },\n          fixVertical = outMode => {\n      fixOutMode({\n        outMode,\n        checkModes: [\"bounce\", \"bounce-vertical\"],\n        coord: pos.y,\n        maxCoord: container.canvas.size.height,\n        setCb: value => pos.y += value,\n        radius\n      });\n    };\n\n    fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n    fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n    fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n    fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n\n    return pos;\n  }\n\n  checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const collisionsOptions = this.options.collisions;\n    const radius = this.getRadius();\n\n    if (!collisionsOptions.enable) {\n      return false;\n    }\n\n    const overlapOptions = collisionsOptions.overlap;\n\n    if (overlapOptions.enable) {\n      return false;\n    }\n\n    const retries = overlapOptions.retries;\n\n    if (retries >= 0 && tryCount > retries) {\n      throw new Error(\"Particle is overlapping and can't be placed\");\n    }\n\n    let overlaps = false;\n\n    for (const particle of this.container.particles.array) {\n      if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n        overlaps = true;\n        break;\n      }\n    }\n\n    return overlaps;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = getParticleBaseVelocity(this.direction),\n          res = baseVelocity.copy(),\n          moveOptions = this.options.move,\n          rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n          radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n          range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n\n    if (!moveOptions.straight) {\n      res.angle += randomInRange(setRangeValue(range.left, range.right));\n    }\n\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n\n    return res;\n  }\n\n  loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n\n    if (shapeData) {\n      return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n    }\n  }\n\n  loadLife() {\n    const container = this.container;\n    const particlesOptions = this.options;\n    const lifeOptions = particlesOptions.life;\n    const life = {\n      delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: particlesOptions.life.count\n    };\n\n    if (life.duration <= 0) {\n      life.duration = -1;\n    }\n\n    if (life.count <= 0) {\n      life.count = -1;\n    }\n\n    return life;\n  }\n\n}\n_Particle_engine = new WeakMap();","map":null,"metadata":{},"sourceType":"module"}